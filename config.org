* Layers
** Appearance
*** Theme
An opinionated pack of [[https://github.com/hlissner/emacs-doom-themes][modern color-themes.]]
#+begin_src emacs-lisp :tangle yes
(setq doom-theme 'doom-one)
#+end_src
*** Line numbers
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Display-Custom.html][Display line numbers.]]
 #+begin_src emacs-lisp :tangle yes
(use-package! display-line-numbers
  :config
  ;; Set default type of line numbers to be `relative'.
  ;; (i.e. the number of the line relative to the line showing
  ;; the windowâ€™s point).
  (setq display-line-numbers-type 'relative))
 #+end_src
*** Keybindings help
Emacs package that displays [[https://github.com/justbur/emacs-which-key][available keybindings]] in popup.
#+begin_src emacs-lisp :tangle yes
(use-package! which-key
  :config
  (setq which-key-allow-imprecise-window-fit nil))
#+end_src
** Edit
*** General
**** Always allow region narrowing
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Narrowing.html][Narrowing.]]
#+begin_src emacs-lisp :tangle yes
(put 'narrow-to-region 'disabled nil)
#+end_src
** Project management
*** Organizer
[[http://orgmode.org/][Keeping notes, maintaining TODO lists, planning projects.]]
#+begin_src emacs-lisp :tangle yes
(use-package! org
  :config
  ;; Directory with org files.
  (setq org-directory "~/org/"))
#+end_src
** Languages
*** C#
Emacs package for [[https://github.com/elizagamedev/unity.el][integration with Unity]] game engine.
#+begin_src emacs-lisp :tangle yes
(use-package! unity
  :when (featurep! :lang csharp +unity)
  :hook ((after-init . unity-build-code-shim)
         (after-init . unity-setup))
  :config
  (setq unity-var-directory (expand-file-name "unity/" doom-etc-dir)))
#+end_src
*** Python
[[https://github.com/emacs-mirror/emacs/blob/master/lisp/progmodes/python.el][Python support.]]
[[https://flake8.pycqa.org/en/latest/][Flake8]] [[https://www.reddit.com/r/emacs/comments/wa7iwz/lsp_with_pyright_and_flake8/][integration]] with LSP.
#+begin_src emacs-lisp :tangle yes
(defun my--configure-python-flycheck ()
  (when (and (modulep! :lang python +lsp)
             (modulep! :checkers syntax))
    (flycheck-select-checker 'python-flake8)))

(use-package! python
  :hook ((python-mode . my--configure-python-flycheck)))
#+end_src
*** Racket
#+begin_src emacs-lisp :tangle yes
(defun my--remove-racket-xp-annotations ()
  (remove-hook 'pre-redisplay-functions
               #'racket-xp-pre-redisplay
               t))

(defun my--use-eww-browser-advice (orig &rest args)
  (let ((browse-url-browser-function #'eww-browse-url))
    (apply orig args)))

(use-package! racket-mode
  :hook ((racket-xp-mode . my--remove-racket-xp-annotations))
  :config
  (advice-add 'racket-browse-url :around #'my--use-eww-browser-advice))
#+end_src
*** Thrift
[[https://github.com/facebook/fbthrift][Thrift IDL support.]]
#+begin_src emacs-lisp :tangle yes
(use-package! thrift
  :mode ("\\.thrift\\'" . thrift-mode))
#+end_src
